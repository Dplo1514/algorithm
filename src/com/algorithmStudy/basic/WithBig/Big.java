package com.algorithmStudy.basic.WithBig;

public class Big {
    class BigO{
        /*
        1. Big-O란?
        * 빅오 표기법은 알고리즘의 효율성을 표기해주는 표기법
        * 알고리즘의 효율성은 데이터 개수(n)가 주어졌을 때 덧셈, 뺄셈, 곱셈 같은 기본 연산의 횟수를 의미
        * 빅오 표기법은 보통 알고리즘의 시간 복잡도와 공간 복잡도를 나타내는데 주로 사용 된다.
            (시간 복잡도는 알고리즘의 시간 효율성을 의미하고, 공간 복잡도는 알고리즘의 공간(메모리) 효율성을 의미한다.)
        *  시간과 공간 복잡도를 나타내는 방법으로는 점근 표기법은 빅오(BigO-O), 빅오메가(big-Ω),빅세타(big-Θ) 표기법이 있다.
        */

        /*
        2. Big-O란?
            2-1 : Big-O 표기법은 알고리즘의 실행 시간에 대한 상한선을 제공하며 입력 크기가 증가할 때 알고리즘의 성능을 예측하는 데 사용된다.
            2-2 : 따라서 Big-O 표기법을 이해하고 사용하는 것은 알고리즘을 개발하고 최적화하는 데 매우 중요하다.

        3. Big-O 특징
            3-1 상수항 무시
            * 빅오 표기법은 데이터 입력값(n)이 충분히 크다고 가정하고 있고
            * 알고리즘의 효율성 또한 데이터 입력값(n)의 크기에 따라 영향 받기 때문에 상수항 같은 사소한 부분은 무시한다.
            * 예를들어 [ O(2N) - > O(N) ] 과 같이 상수항은 무시하고 표기한다.
            3-2 영향력 없는 항 무시
            * 빅오 표기법은 데이터 입력값(n)의 크기에 따라 영향을 받기 때문에 가장 영향력이 큰 항에 이외에 영향력이 없는 항들은 무시한다.
            * 예를들어 [ O(N^2 + 2N + 1) -> O(N^2)] 과 같이 영향력이 지배적인 항은 포함 이 외에 영향력이 없는 항들은 무시한다.

        4. Big-O Function ( [빠름차순] Big-O.faster Order By ASC )
            1. O(1) 상수 시간 알고리즘(constant time algorithm) : 입력 크기와 무관하게 일정한 실행 시간을 가지는 알고리즘
                1-1. ex O(1)       : 배열의 0번째를 인덱스 , stack.pop()
            2. O(log n) 로그 시간 알고리즘(logarithmic time algorithm) :  입력 크기에 대한 로그 함수와 비례하여 실행 시간이 증가하는 알고리즘
                2-1. ex O(log n)   : 이진트리
            3. O(n) 선형 시간 알고리즘(linear time algorithm) :  입력 크기에 비례하여 실행 시간이 증가
                3-1. ex O(n)       : for문
            4. O(n log n) 로그 선형 시간 알고리즘(log-linear time algorithm) : 입력 크기가 증가함에 따라 실행 시간이 n과 log n의 곱과 비례하여 증가
                4-1. ex O(n log n) : 병합 정렬(merge sort)과 퀵 정렬(quick sort)
            5. O(n^2) 이차 시간 알고리즘(quadratic time algorithm) : 입력 크기의 제곱에 비례하여 실행 시간이 증가
                5-1. ex O(n^2)     : 선택 정렬(selection sort)과 삽입 정렬(insertion sort)
            6. O(2^n) 지수 시간 알고리즘(exponential time algorithm) : 입력 크기의 지수에 비례하여 실행 시간이 증가하는 알고리즘 , 이 알고리즘은 대부분의 경우 비효율적이며, 입력 크기가 작을 때만 사용
                6-1. ex O(2^n)     : 하노이 탑 문제(Hanoi tower problem)와 같은 일부 문제 풀이에 사용
        */
    }

    class BigΩ{
        /*
        1. Big-Ω란?
            * BigΩ(오메가)은 알고리즘의 시간 복잡도의 하한을 설명하는 데 사용되는 수학적 표기법입니다. 알고리즘이 작업을 완료하는 데 필요한 최소 시간을 나타냅니다.

        2. Big-Ω의 특징은?
            * BigΩ 표기법은 알고리즘 실행 시간의 하한값을 제공합니다.
            * 알고리즘이 충분히 큰 n에 대해 특정 함수 f(n)보다 성능이 저하되지 않도록 보장합니다.
            * 알고리즘의 평균 또는 최상의 성능이 아닌 최악의 시나리오만 설명합니다.

        3. Big-Ω function
            * 주어진 함수 f(n)에 대해 Ω(f(n))은 충분히 큰 n에 대해 g(n)이 항상 f(n)보다 크거나 같도록 함수 g(n)의 집합입니다.
            * Ω 표기법은 알고리즘 실행 시간의 하한값만 제공하며 상한값은 제공하지 않습니다.
            * 시간 복잡도가 Ω(n^2)인 알고리즘은 완료하는 데 최소 2차 시간이 걸리지만 특정 입력에 대해 더 나은 실행 시간을 가질 수 있습니다.*/
    }
}
